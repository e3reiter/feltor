#include <iostream>

#include <cusp/print.h>
#include "xspacelib.cuh"
#include "interpolation.cuh"
#include "../blas.h"
#include "evaluation.cuh"

#include <math.h>

double function( double x)
{   return sin(x);
}
typedef cusp::coo_matrix<int, double, cusp::host_memory> Matrix;

int main()
{ double x0 = 0., x1 = 2.*M_PI;
  int p = 3, n = 4;

  dg::Grid1d grid_h(x0, x1, p, n);
  dg::DVec vec_h = dg::evaluate( function, grid_h);
  for( unsigned i=0; i<vec_h.size(); ++i)
    { std::cout<< vec_h[i] << std::endl;
    }
  std::cout << "----------" <<std::endl;
  dg::Grid1d grid_2h(x0, x1, p, n/2);
  Matrix IF2C = dg::create::interpolation( grid_2h, grid_h);
  dg::DVec vec_2h = dg::evaluate( dg::one, grid_2h);
  dg::blas2::symv( IF2C, vec_h, vec_2h);
  for( unsigned i=0; i<vec_2h.size(); ++i)
    { std::cout<< vec_2h[i] << std::endl;
    }
//  std::cout << "----------" <<std::endl;
//  Matrix IC2F = dg::create::interpolation( grid_fine, grid_2h);
//  dg::blas2::symv( IC2F, vec_2h, vec_fine);
//  for( unsigned i=0; i<vec_fine.size(); ++i)
//    { std::cout<< vec_fine[i] << std::endl;
//    }
    return 0;
}
